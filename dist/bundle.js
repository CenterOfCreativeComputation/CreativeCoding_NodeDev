(() => { "use strict"; var s = { 48: (s, t) => { Object.defineProperty(t, "__esModule", { value: !0 }), t.VerletNode = void 0, t.VerletNode = class { constructor(s, t, i, e) { this.p = s, this.pos = t, this.radius = i, this.col = e, this.radiusOld = this.radius, this.posOld = s.createVector(t.x, t.y, t.z) } nudge(s) { this.offset = s, this.pos.add(this.offset) } verlet() { var s = this.p.createVector(this.pos.x, this.pos.y, this.pos.z); this.pos.x += this.pos.x - this.posOld.x, this.pos.y += this.pos.y - this.posOld.y, this.pos.z += this.pos.z - this.posOld.z, this.posOld.set(s) } draw(s = 10) { this.p.fill(this.col), this.p.noStroke(), this.p.push(), this.p.translate(this.pos.x, this.pos.y, this.pos.z), this.p.sphere(this.radius, s, s), this.p.pop() } setStyle(s, t) { this.radius = s, this.col = t } boundsCollide(s) { this.pos.x > s.x / 2 - this.radius ? (this.pos.x = s.x / 2 - this.radius, this.pos.x -= 1) : this.pos.x < -s.x / 2 + this.radius && (this.pos.x = -s.x / 2 + this.radius, this.pos.x += 1), this.pos.y > s.y / 2 - this.radius ? (this.pos.y = s.y / 2 - this.radius, this.pos.y -= 1) : this.pos.y < -s.y / 2 + this.radius && (this.pos.y = -s.y / 2 + this.radius, this.pos.y += 1), this.pos.z > s.z / 2 - this.radius ? (this.pos.z = s.z / 2 - this.radius, this.pos.z -= 1) : this.pos.z < -s.z / 2 + this.radius && (this.pos.z = -s.z / 2 + this.radius, this.pos.z += 1) } } }, 330: (s, t) => { Object.defineProperty(t, "__esModule", { value: !0 }), t.VerletStick = void 0, t.VerletStick = class { constructor(s, t, i, e = .5, o = 0, h = s.color(200, 225, 200)) { this.p = s, this.start = t, this.end = i, this.len = this.start.pos.dist(this.end.pos), this.stickTension = e, this.anchorTerminal = o, this.col = h } constrainLen() { for (let s = 0; s < 10; s++) { let s = this.p.createVector(this.end.pos.x - this.start.pos.x, this.end.pos.y - this.start.pos.y, this.end.pos.z - this.start.pos.z), t = s.mag(), i = 0, e = 0; switch (this.anchorTerminal) { case 0: default: i = .5, e = .5; break; case 1: i = 0, e = 1; break; case 2: i = 1, e = 0; break; case 3: i = 0, e = 0 }let o = (t - this.len) / t; this.start.pos.x += s.x * (i * this.stickTension * o), this.start.pos.y += s.y * (i * this.stickTension * o), this.start.pos.z += s.z * (i * this.stickTension * o), this.end.pos.x -= s.x * (e * this.stickTension * o), this.end.pos.y -= s.y * (e * this.stickTension * o), this.end.pos.z -= s.z * (e * this.stickTension * o) } } nudge(s, t) { 0 == s ? this.start.nudge(t) : this.end.nudge(t) } draw() { this.p.stroke(this.col), this.p.noFill(), this.p.beginShape(), this.p.vertex(this.start.pos.x, this.start.pos.y, this.start.pos.z), this.p.vertex(this.end.pos.x, this.end.pos.y, this.end.pos.z), this.p.endShape() } boundsCollide(s) { this.start.boundsCollide(s), this.end.boundsCollide(s) } setColor(s) { this.col = s } setOpacity(s) { } setVisibility(s) { } reinitializeLen() { this.len = this.start.pos.dist(this.end.pos) } } }, 0: function (s, t, i) { var e = this && this.__importDefault || function (s) { return s && s.__esModule ? s : { default: s } }; Object.defineProperty(t, "__esModule", { value: !0 }), t.CryptoIra = void 0; const o = e(i(472)), h = i(330), r = i(48); t.CryptoIra = class { constructor(s) { this.vBlocks = [], this.vSticks = [], this.data = [0, 280, 5.569769947827575, 20, 260, 7.824798350553852, 20, 280, 6.109092557981144, 40, 240, 4.681256125936855, 40, 260, 4.610955780875687, 40, 280, 2.655463953410158, 60, 240, 6.099845935452759, 60, 260, 6.254889450659125, 60, 280, 4.425491202918883, 80, 120, 5.659404201519326, 80, 140, 2.9382590995360456, 80, 160, 7.95045873275938, 80, 240, 2.412981686866654, 80, 260, 2.8234165288314967, 80, 280, 3.3791125055653985, 100, 60, 6.1605587694840604, 100, 80, 3.7668555203476326, 100, 100, 7.72519449506286, 100, 120, 5.192420398073569, 100, 140, 3.0871374515872723, 100, 160, 5.482207678550063, 100, 180, 6.124323426836541, 100, 200, 2.902431094784841, 100, 240, 6.751740572511574, 100, 260, 6.8633937170009816, 100, 280, 7.086746354226339, 120, 40, 4.507008251790188, 120, 60, 3.258484541570311, 120, 80, 4.663622510278616, 120, 100, 3.8069355740966073, 120, 120, 7.1097561606882405, 120, 140, 7.4967478446900735, 120, 160, 7.195920891678038, 120, 180, 2.9644766693910762, 120, 200, 3.8732731812060086, 120, 220, 7.288700005298431, 120, 240, 2.21581172057251, 120, 260, 6.678198945813121, 120, 280, 5.686145778502271, 140, 40, 6.750558072355943, 140, 60, 3.168964246280819, 140, 80, 5.314612003708216, 140, 100, 4.325365691626661, 140, 120, 5.772000771024251, 140, 140, 7.686774630277364, 140, 160, 3.1781444850054394, 140, 180, 4.772777352460978, 140, 200, 5.672793040273547, 140, 220, 2.872257813262625, 140, 240, 2.381736752920191, 140, 260, 4.266720773044291, 140, 280, 6.987166863525835, 160, 40, 3.4338930242802155, 160, 60, 3.454301183955077, 160, 80, 5.235751535316886, 160, 100, 4.176779831370021, 160, 120, 7.12013074087476, 160, 140, 2.6532120331084843, 160, 160, 2.478175522205396, 160, 180, 4.139886616613319, 160, 200, 2.8458102361444295, 160, 220, 2.981735948627919, 160, 240, 4.407280029498921, 160, 260, 6.280408603978808, 160, 280, 6.002713069865988, 180, 40, 3.74570818862482, 180, 60, 2.6024144001392866, 180, 80, 5.829296784470605, 180, 100, 3.071437066618811, 180, 120, 5.20429350731119, 180, 140, 7.518460731373171, 180, 160, 2.742716183282554, 180, 180, 5.469818147306061, 180, 200, 3.689979622961328, 180, 220, 7.9879380262198545, 180, 240, 5.085400967201172, 180, 260, 3.7186395233936778, 180, 280, 4.9909382167121805, 200, 60, 4.333384329340143, 200, 80, 6.378131792048445, 200, 100, 3.308877181080982, 200, 120, 2.799981845191089, 200, 140, 3.10418693785104, 200, 160, 3.7703554221544886, 200, 180, 7.779109339272755, 200, 200, 7.4215627089805825, 200, 220, 6.207994437632753, 200, 240, 5.7224732321638445, 200, 260, 7.177538116534537, 200, 280, 5.684186366504841, 220, 80, 6.577758790789018, 220, 100, 5.042567883844206, 220, 120, 7.435863957096035, 220, 140, 4.186779426740732, 220, 160, 2.336826591708859, 220, 200, 7.366633362347818, 220, 220, 7.766632600420001, 220, 240, 4.896663006573691, 220, 260, 3.87794032059981, 220, 280, 3.2588079814172457, 240, 240, 2.634153722086049, 240, 260, 5.100321955195519, 240, 280, 5.879536281879792, 260, 260, 6.052366625448592, 260, 280, 4.595350920558327, 280, 260, 6.327152095700034, 280, 280, 2.7658109031453235], this.cols = [76, 71, 68, 86, 79, 72, 65, 65, 62, 71, 66, 64, 69, 66, 64, 72, 70, 66, 73, 70, 67, 67, 67, 65, 85, 78, 71, 31, 26, 26, 228, 147, 131, 228, 153, 140, 89, 86, 83, 55, 53, 52, 65, 65, 62, 69, 63, 57, 117, 107, 99, 197, 157, 131, 192, 151, 124, 196, 141, 112, 232, 182, 151, 207, 161, 135, 204, 155, 130, 93, 84, 80, 105, 92, 87, 103, 93, 85, 73, 64, 59, 140, 110, 98, 195, 163, 144, 244, 196, 170, 241, 193, 166, 93, 79, 72, 199, 139, 106, 242, 186, 162, 206, 152, 124, 225, 159, 130, 140, 109, 92, 194, 143, 114, 170, 150, 136, 69, 62, 58, 94, 80, 74, 228, 189, 164, 244, 201, 174, 247, 190, 164, 169, 119, 97, 235, 170, 138, 237, 169, 151, 225, 182, 159, 217, 137, 117, 214, 143, 120, 192, 143, 112, 184, 137, 110, 74, 66, 62, 103, 84, 78, 188, 132, 106, 235, 182, 159, 242, 186, 159, 197, 131, 105, 225, 156, 133, 236, 179, 156, 183, 140, 121, 218, 127, 117, 201, 140, 117, 153, 116, 96, 187, 142, 117, 59, 56, 55, 74, 65, 60, 173, 139, 118, 216, 157, 130, 219, 163, 139, 79, 67, 64, 207, 147, 122, 191, 129, 106, 157, 119, 101, 144, 104, 87, 102, 79, 69, 130, 99, 82, 85, 79, 75, 73, 67, 63, 75, 66, 62, 148, 126, 111, 152, 113, 94, 99, 80, 74, 151, 108, 90, 161, 115, 99, 131, 99, 88, 127, 95, 83, 132, 99, 84, 66, 66, 63, 121, 114, 105, 63, 60, 57, 74, 66, 64, 79, 71, 65, 132, 96, 86, 101, 67, 63, 49, 48, 49, 53, 53, 51, 65, 65, 64, 135, 125, 117, 108, 94, 87, 92, 82, 75, 137, 126, 115, 85, 82, 77, 74, 71, 68, 118, 101, 95, 80, 77, 73, 80, 77, 73], this.p = s; for (let t = 0; t < this.data.length; t += 3)this.vBlocks.push(new r.VerletNode(s, new o.default.Vector(this.data[t], this.data[t + 1], this.data[t + 2]), 10, s.color(this.cols[t], this.cols[t + 1], this.cols[t + 2]))); for (let s = 0, t = 0; s < this.vBlocks.length; s++)for (let i = s; i < this.vBlocks.length; i++)t++ % 10 == 0 && s !== i && this.vSticks.push(new h.VerletStick(this.p, this.vBlocks[s], this.vBlocks[i], .9)); this.vBlocks[23].nudge(new o.default.Vector(-3, 2, 4)) } draw() { for (let s = 0; s < this.vBlocks.length; s++)this.vBlocks[s].verlet(), this.vBlocks[s].draw(); for (let s = 0; s < this.vSticks.length; s++)this.vSticks[s].constrainLen() } } }, 209: function (s, t, i) { var e = this && this.__importDefault || function (s) { return s && s.__esModule ? s : { default: s } }; Object.defineProperty(t, "__esModule", { value: !0 }); const o = e(i(472)), h = i(0); new o.default((s => { let t, i, e, o = s.int(s.random(110, 140)), r = s.int(s.random(110, 140)), a = s.int(s.random(110, 140)); s.setup = () => { t = "#" + s.hex(o, 2) + s.hex(r, 2) + s.hex(a, 2), s.background(o, r, a), document.body.style.backgroundColor = t, document.title = "CryptoIra"; let n = s.createCanvas(600, 600, s.WEBGL); s.setAttributes("antialias", !0), n.style("display", "block"), i = s.createVector(0, 0, 300), s.noStroke(), e = new h.CryptoIra(s) }, s.draw = () => { s.background(o, r, a), s.orbitControl(); let t = s.createVector(i.x, i.y, i.z); s.ambientLight(20, 10, 15), s.directionalLight(255, 0, 0, t), s.shininess(25), s.specularColor(255), s.specularMaterial(20), s.pointLight(255, 255, 255, -10, 5, 200), s.pointLight(255, 255, 255, -60, 500, 380), s.translate(-150, -150), e.draw() }, s.keyTyped = () => { if ("p" === s.key) { const t = "CryptoIra_" + s.year() + s.month() + s.day() + s.hour() + s.minute() + s.second() + ".png"; s.save(t) } } })) }, 472: s => { s.exports = p5 } }, t = {}; !function i(e) { var o = t[e]; if (void 0 !== o) return o.exports; var h = t[e] = { exports: {} }; return s[e].call(h.exports, h, h.exports, i), h.exports }(209) })();